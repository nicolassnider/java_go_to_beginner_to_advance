Article No 7
Data Structures
Topics:

Array
Linked List
Stack
Queue
Binary Tree
Binary Search Tree
Heap
Hashing
Graph
Matrix
Misc
Advanced Data Structure
What is a datastructure?
Data structures are based on abstract data types (ADT), which Wikipedia defines as follows:

mathematical model for data types where a data type is defined by its behavior (semantics) from the point of view of a user of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations. 

Array data structure

Arrays. An array is a data structure that holds a fixed number of values (data points) of the same type. Each item, or value, in an array is called an element, and each element is accessed by its integer index. ... We initialize an array instance like we initialize an instance of any other object in Java.

The number of elements an array instance can hold is stored in its final int field called length. A final field cannot be changed after it is set, and therefore, a final field is often referred to as a constant field. This length property of the array is what allows it to be of a fixed size.

Why Arrays are Important & Useful

In the Variables chapter, you learned how to store a single data point in a variable. Then, in the Datatypes chapter, you learned that its best to store data of a certain type in a variable with that respective type: store a character string in a String variable, store a whole number, integer in an int variable, store a floating point number in a double variable, and so on. Now that we are becoming more advanced Java programmers, we want to store a collection of data in a single data structure for later manipulation.



At initialization, all elements in in the array are initialized to a zero value: null for arrays of objects, 0 for primitive number types, and false for boolean types. Let’s add our friends to the array before we try to get them out:

friends[0] = "Fayaz";
friends[1] = "Khan";
friends[2] = "Jeff";
friends[3] = "Smith";
friends[4] = "Dennis";
Now that we have added our five friends to our friends array, let’s access the first and last one and print them out:

String firstFriend = friends[0];
System.out.println("First friend is " + firstFriend);
//prints "First friend is Fayaz"
System.out.println("Last friend is " + friends[friends.length - 1]);
//prints "Last friend is Khan"
Notice that we were able to access the last element in our friends array by doing a little math. We used the length property of the array to get the total number of elements in it array and subtracted one from that number to get the index of the last element. That is the dynamic way of accessing the last element, but we could have just as easily typed friends[4] to access the fifth (last) element in our array of five friends. In the unfortunate event that we lose a friend, we should zero out the value of the element in our array that corresponds to our lost friend. If we lose our first friend and our second friend changes her name, we can reflect those updates in our array like so:

friends[0] = null;
friends[1] = "Jeff";
System.out.println("First friend is now " + friends[0]);
//prints "First friend is now null"
System.out.println("Second friend changed name to " + friends[1]);
//prints "Second friend changed name to Jeff"
Now our first friend equals null and our second friend, smith, changed his name to Jeff. Let’s make another array to hold the corresponding phone numbers of all our friends as integers:

int[] friendsPhoneNumbers = new int[friends.length];
friendsPhoneNumbers[0] = 555_8000;
friendsPhoneNumbers[1] = 5554448;
friendsPhoneNumbers[2] = 555_4311;
friendsPhoneNumbers[3] = 555_7898;
friendsPhoneNumbers[4] = 555_6710;
Our friendsPhoneNumbers array is initialized with the value of the length property of our friends array to ensure they both have the same number of elements.

Notice that some of the phone numbers have underscores in them. Using underscores in long numbers, like commas on paper, make them easier to read. You can add underscores between numbers, not at the start nor end.
We can loop over, or traverse, our array of friends to print out the name of each of our friends by using a for loop terminated by the length of our array:

for(int index = 0; index < friends.length; index++) {
    System.out.printf("Friend %d: %s\n", index, friends[index]);
}
/*Prints: 
    Friend 0: null
    Friend 1: Jeff
    Friend 2: Smith
    Friend 3: Dennis
    Friend 4: Khan
 */
We can go even further and print out each friend’s phone number from our friendsPhoneNumbers array next to his/her name. However, we should only print a friend’s phone number if their name is not equal to (!=) null:

for(int index = 0; index < friends.length; index++) {
    String friend = friends[index];
    if(friend != null) {
        System.out.printf("Friend %d: %s's phone number is %d\n",
                index, friend, friendsPhoneNumbers[index]);
    } else {
        System.out.println("#Alert: No friend at index " + index);
    }
}
/*Prints:
    #Alert: No friend at index 0
    Index 1: Jeff's phone number is 5554448
    Index 2: Smith's phone number is 5554311
    Index 3: Dennis's phone number is 5557898
    Index 4: Khan's phone number is 5556710
 */
Notice that we don’t print the element at index 0 in either array because we lost our first friend earlier; the element at index 0 in the friends array is now null, so the corresponding phone number at index 0 in the friendsPhoneNumbers array is now useless to us. One more thing we can do to make our phone book more intuitive is consolidate our two arrays into one. The new array will hold Friend objects instead of String and int values.

Remember that, by default, all classes extend the Object class provided by Java. The toString() instance method of the Object class is called whenever the compiler tries to convert an object to a String.
Our Friend class will have three instance fields: name, areaCode, and phoneNumber. Our Friend class will override the toString() instance method of its Object superclass to return all of a Friend instance’s information as a single String instance:

public class Friend {
    private String name;
    private int phoneNumber;
    private int areaCode;
 
    ...
    @Override
    public String toString() {
        return String.format("Name: %s | Phone Number: (%d)-%d",
                name, areaCode, phoneNumber);
    }
}
In that snippet, we used the format() static method of the String class to map values to placeholders in our String.
Let’s create an array of type Friend to hold all of our friends’ contact information like a phone book does.

Friend[] phoneBook = new Friend[5];
phoneBook[0] = new Friend("Fayaz", 215, 555_6000);
phoneBook[1] = new Friend("Khan", 484, 55556668);
phoneBook[2] = new Friend("Jeff", 369, 485_8521);
phoneBook[3] = new Friend("Smith", 222, 445_7898);
phoneBook[4] = new Friend("Dennis", 222, 555_6710);
Our friend, Imani, from earlier decided to give us another chance, so we added her to our phone book in her original spot, index 0. Now, we can more intuitively loop over our phone book array to print out each of our friends and their contact information:

for(int index = 0; index < friends.length; index++) {
    Friend friend = phoneBook[index];
    if(friend != null) {
        System.out.println("Friend " + index + " -> " + friend);
    }
}
/*Prints:
    Friend 0 -> Name: Fayaz | Phone Number: (215)-5556000
    Friend 1 -> Name: Khan  | Phone Number: (484)-5556668
    Friend 2 -> Name: Jeff  | Phone Number: (369)-4854311
    Friend 3 -> Name: Smith | Phone Number: (222)-4447898
    Friend 4 -> Name: Dennis| Phone Number: (222)-5556710
 */
The last thing you should know about arrays holding objects is that when you want to update an element at an index, you don’t need to update the entire element. You can simply get the element and update the field you need to update or call the method you want on the object. Let’s change our second friend’s name from Andres to Alejandro again and print it out:

Friend friend2 = phoneBook[1];
friend2.changeName("Jeff");
System.out.println(friend2);
//prints "Name: jeff| Phone Number: (484)-5556668"
If we lose our friend, Imani, again, we can remove her from our phone book array the same way we did earlier in our friends array:

phoneBook[0] = null;
System.out.println(phoneBook[0]);
//prints "null"
That’s it. We now have a phone book we can add to, update the elements of when a friend changes his or her contact information, and delete elements from when we lose a friend. It is clear that arrays are useful when you want to store a collection of values — objects or primitives — of the same type in one place for later use. The only constraint is that an array must have a fixed length of elements. 

Binary Tree

Trees: Unlike Arrays, Linked Lists, Stack and queues, which are linear data structures, trees are hierarchical data structures.

Tree Vocabulary: The topmost node is called root of the tree. The elements that are directly under an element are called its children. The element directly above something is called its parent. For example, a is a child of f and f is the parent of a. Finally, elements with no children are called leaves.

      tree
      ----
       j    <-- root
     /   \
    f      k  
  /   \      \
 a     h      z    <-- leaves 
Why Trees? 1. One reason to use trees might be because you want to store information that naturally forms a hierarchy. For example, the file system on a computer:

file system
-----------
     /    <-- root
  /      \
...       home
      /          \
   ugrad        course
    /       /      |     \
  ...      cs101  cs112  cs113  
2. Trees (with some ordering e.g., BST) provide moderate access/search (quicker than Linked List and slower than arrays). 3. Trees provide moderate insertion/deletion (quicker than Arrays and slower than Unordered Linked Lists). 4. Like Linked Lists and unlike Arrays, Trees don’t have an upper limit on number of nodes as nodes are linked using pointers.

Main applications of trees include: 

1. Manipulate hierarchical data.

2. Make information easy to search (see tree traversal).

3. Manipulate sorted lists of data. 

4. As a workflow for compositing digital images for visual effects. 

5. Router algorithms 

6. Form of a multi-stage decision-making (see business chess).

Binary Tree: A tree whose elements have at most 2 children is called a binary tree. Since each element in a binary tree can have only 2 children, we typically name them the left and right child.

/* Class containing left and right child of current
   node and key value*/
class Node
{
    int key;
    Node left, right;
 
    public Node(int item)
    {
        key = item;
        left = right = null;
    }
}
For the implementation, we’ll use an auxiliary Node class that will store int values and keep a reference to each child:

class Node {
    int value;  
   Node left;  
  Node right;  
    Node(int value)
{      
  this.value = value;    
     right = null;
         left = null;    
 } }	Then, let’s add the starting node of our tree, usually called root:
public class BinaryTree {    
   Node root;     // ...
 }
Graph Data Structure And Algorithms

Introduction to graphs

Graphs are widely-used structure in computer science and different computer applications. We don't say data structure here and see the difference. Graphs mean to store and analyze metadata, the connections, which present in data. For instance, consider cities in your country. Road network, which connects them, can be represented as a graph and then analyzed. We can examine, if one city can be reached from another one or find the shortest route between two cities.



First of all, we introduce some definitions on graphs. Next, we are going to show, how graphs are represented inside of a computer. Then you can turn to basic graph algorithms.

There are two important sets of objects, which specify graph and its structure. First set is V, which is called vertex-set. In the example with road network cities are vertices. Each vertex can be drawn as a circle with vertex's number inside.




Next important set is E, which is called edge-set. E is a subset of V x V. Simply speaking, each edge connects two vertices, including a case, when a vertex is connected to itself (such an edge is called a loop). All graphs are divided into two big groups: directed and undirected graphs. The difference is that edges in directed graphs, called arcs, have a direction. These kinds of graphs have much in common with each other, but significant differences are also present. We will accentuate which kind of graphs is considered in the particular algorithm description. Edge can be drawn as a line. If a graph is directed, each line has an arrow.






undirected graph


directed graph

Now, we present some basic graph definitions.

Sequence of vertices, such that there is an edge from each vertex to the next in sequence, is called path. First vertex in the path is called the start vertex; the last vertex in the path is called the end vertex. If start and end vertices are the same, path is called cycle. Path is called simple, if it includes every vertex only once. Cycle is called simple, if it includes every vertex, except start (end) one, only once. Let's see examples of path and cycle.

path (simple)


cycle (simple)

The last definition we give here is a weighted graph. Graph is called weighted, if every edge is associated with a real number, called edge weight. For instance, in the road network example, weight of each road may be its length or minimal time needed to drive along.




weighted graph

Linked List Data Structure

Linked Lists
Introduction
One disadvantage of using arrays to store data is that arrays are static structures and therefore cannot be easily extended or reduced to fit the data set. Arrays are also expensive to maintain new insertions and deletions. In this chapter we consider another data structure called Linked Lists that addresses some of the limitations of arrays.

A linked list is a linear data structure where each element is a separate object.

2018-05-28_04-52-30-fbda5987b37ef445272b4f2076e2e2fd.bmp

The entry point into a linked list is called the head of the list. It should be noted that head is not a separate node, but the reference to the first node. If the list is empty then the head is a null reference.

A linked list is a dynamic data structure. The number of nodes in a list is not fixed and can grow and shrink on demand. Any application which has to deal with an unknown number of objects will need to use a linked list.

One disadvantage of a linked list against an array is that it does not allow direct access to the individual elements. If you want to access a particular item then you have to start at the head and follow the references until you get to that item.

Another disadvantage is that a linked list uses more memory compare with an array - we extra 4 bytes (on 32-bit CPU) to store a reference to the next node.

Types of Linked Lists
A singly linked list is described above

A doubly linked list is a list that has two references, one to the next node and another to previous node.

2018-05-28_04-53-08-1cf757fe78cc7d4063186ec9a9fcdc13.bmp

Another important type of a linked list is called a circular linked list where last node of the list points back to the first node (or the head) of the list.

The Node class
In Java you are allowed to define a class (say, B) inside of another class (say, A). The class A is called the outer class, and the class B is called the inner class. The purpose of inner classes is purely to be used internally as helper classes. Here is the LinkedList class with the inner Node class

private static class Node<AnyType>
{
   private AnyType data;
   private Node<AnyType> next;
 
   public Node(AnyType data, Node<AnyType> next)
   {
      this.data = data;
      this.next = next;
   }
}
An inner class is a member of its enclosing class and has access to other members (inclusing private) of the outer class, And vise versa, the outer class can have a direct access to all members of the inner class. An inner class can be declared private, public, protected, or package private. There are two kind of inner classes: static and non-static. A static inner class cannot refer directly to instance variables or methods defined in its outer class: it can use them only through an object reference.

Iterator
The whole idea of the iterator is to provide an access to a private aggregated data and at the same moment hiding the underlying representation. An iterator is Java is an object, and therefore it's implementation requires creating a class that implements the Iterator interface. Usually such class is implemented as a private inner class. The Iterator interface contains the following methods:

AnyType next() - returns the next element in the container
boolean hasNext() - checks if there is a next element
void remove() - (optional operation).removes the element returned by next()
In this section we implement the Iterator in the LinkedList class. First of all we add a new method to the LinkedList class:

public Iterator<AnyType> iterator()
{
   return new LinkedListIterator();
}
Here LinkedListIterator<a href="https://img-a.udemycdn.com/redactor/raw/2018-05-28_04-54-39-7eecac6de38b3786444e1f9c373b0f14.bmp?BqLjoRZCf1RvvEHnVsSOb_qCfYfyTOSf9-H086yDRjJPLQCftK4Gj6bj2WWsZaHAN03kbAXXZSKTQtNkAgM-su9iw4AlwBA92xij--IBVXu5iXxacEJnzpwseUnaU3OKXLpzfmyKY3tX--KBlpni7EhiI9gz1H3gtQjOFDJQj3GC64l4" data-s3="https://img-a.udemycdn.com/redactor/raw/2018-05-28_04-54-39-7eecac6de38b3786444e1f9c373b0f14.bmp?8dMWrTj4N6oKgCP8iKV3qmYUlNhltaZFNMqOFxkS6HqX-u04urpl930UCsLwS8LlPkcoPWyy6M6lIbkMl6eeke1eacVjZs8LBp2-dYOrFuv_nQUIy3_PoAWUBDzsCau5vltbMiYjSfyfODM-QxP2q38qhF4TLMoLX3219hEkKCOjNHAM" rel="nofollow">2018-05-28_04-54-39-7eecac6de38b3786444e1f9c373b0f14.bmp</a> is a private class inside the LinkedList class

private class LinkedListIterator implements Iterator<AnyType>
{
   private Node<AnyType> nextNode;
 
   public LinkedListIterator()
   {
      nextNode = head;
   }
   ...
}
The LinkedListIterator class must provide implementations for next() and hasNext() methods. Here is the next() method:

public AnyType next()
{
   if(!hasNext()) throw new NoSuchElementException();
   AnyType res = nextNode.data;
   nextNode = nextNode.next;
   return res;
}
Polynomial Algebra
The biggest integer that we can store in a variable of the type int is 2<sup>31</sup> - 1 on 32-but CPU. You can easily verify this by the following operations:

int prod=1;
for(int i = 1; i <=; 31; i ++)
         prod *= 2;
System.out.println(prod);
This code doesn't produce an error, it produces a result! The printed value is a negative integer -2147483648 = -2<sup>31</sup>. If the value becomes too large, Java saves only the low order 32 (or 64 for longs) bits and throws the rest away.

In real life applications we need to deal with integers that are larger than 64 bits (the size of a long). To manipulate with such big numbers, we will be using a linked list data structure. First we observe that each integer can be expressed in the decimal system of notation.

937 = 9*102 + 3*101 + 7*1002011 = 2*103 + 0*102 + 1*101 + 1*100

Now, if we replace a decimal base 10 by a character, say 'x', we obtain a univariate polynomial, such as

0.45 - 1.89 x2 + 3.4 x5 + 9 x16

We will write an application that manipulates polynomials in one variable with real coefficients.Among many operations on polynomials, we implement addition, multiplication, differentiation and evaluation. A polynomial willbe represented as a linked list, where each node has an integer degree, a double coefficient and a reference to the next term. The final node will have a null reference to indicate the end of the list. Here is a linked link representation for the above polynomial:

2018-05-28_04-54-49-b4f4d52c1697158b1f4a0b1689283d75.bmp

public class Node<T> {
// The data
private T data;
// Pointer to the next node
private Node<T> nextNode;
public Node(T data) {
this.data = data;
}
/*
* =====================================
* ======== Getters and Setters ========
* =====================================
* */
public T getData() {
return data;
}
public void setData(T data) {
this.data = data;
}
public Node<T> getNextNode() {
return nextNode;
}
public void setNextNode(Node<T> nextNode) {
this.nextNode = nextNode;
}
// In most cases int is recommended to override the toString() method
// so that the data will be converted into a string format
// that is meaningful to the user
@Override
public String toString() {
return "Node{" +
"data=" + data +
'}';
}
}