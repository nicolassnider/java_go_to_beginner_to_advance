Article No 4
                                                                                          Loops in Java

Looping in programming languages is a feature which facilitates the execution of a set of instructions/functions repeatedly while some condition evaluates to true. Java provides three ways for executing the loops. While all the ways provide similar basic functionality, they differ in their syntax and condition checking time.

When a block of code executes number of times, we referred it as loop.

The three basic loop control statements supported by java are :

while loop

do...while loop

for loop

enhance for loop

while loop control statement
The while loop repeats a statement or block while its controlling expression is true. given below it's syntax :

while(condition) { //body of loop }

Here, the condition can be any Boolean expression, whose outcome is either true or false. The loop executes if the condition is true. If not, the next line of code executes.

public class Main {
   public static void main(String args[]){
      int a= 10;
      System.out.println("The Changing value of 'a' during execution :");
      while( a < 20 ){
      System.out.print("a : " + a );
      a++;
      System.out.print("\n");
      }
   }
}
do...while loop control statement :
This loop is similar to while loop but it executes at least one time. After executing set of code or block every time, it checks the condition - if condition is true then block of code executes , if not - it will not execute. The syntax of this loop control statement is given below :

do
{
   //body of loop
}while(condition);
Given below the sample code :

public class Main {
   public static void main(String args[]){
      int a= 3;
      System.out.println("The Changing value of 'a' during execution :")
      do{
         System.out.print(" a : " + a );
         a++;
         System.out.print("\n");
      }while( a < 10 );
   }
}
for loop control statement :
This loop works as follows : At first go, it initialize the variable. After this, it checks the condition, if true then it will execute further. If not , it will terminate loop. After first go, the sequence of execution is as follows : first evaluate the condition, then execution of body of loop, and then executing the iteration expression with each pass.

The syntax given below :

for(initialization; Condition; iteration)
{
   //body
}
Example :

public class Main{ 
public static void main(String args[])
{ 
for(int a = 10; a < 20; a = x+1){ 
System.out.print("value of a : " + a );
System.out.print("\n"); 
} } }
enhance for loop (for-each)
Enhance for loop was added in java 5, which is mainly used for arrays , It is also referred as 'for-each'.  

Syntax is given as follows :

for(type itr-var: collection)
{
   //body
}
Example :

public class Main {
public static void main(String args[]){
int [] array = {10, 20, 30, 40, 50};
for(int a : array ){
System.out.print( a );
System.out.print(",");
}
System.out.print("\n");
String [] list ={"Fayaz", "Khan", "joy", "jeff"};
for( String li : list ) {
System.out.print( li );
System.out.print(",");
}
}
}
The while and do-while Statements:
The while statement continually executes a block of statements while a particular condition is true. Its syntax can be expressed as:
while (expression) {
     statement(s)
}
The while statement evaluates expression, which must return a boolean value. If the expression evaluates to true, the while statement executes the statement(s) in the while block. The while statement continues testing the expression and executing its block until the expression evaluates to false. Using the while statement to print the values from 1 through 10 can be accomplished as in the following WhileDemo program:

class WhileDemo {
    public static void main(String[] args){
        int count = 1;
        while (count < 11) {
            System.out.println("Count is: " + count);
            count++;
        }
    }
}
You can implement an infinite loop using the while statement as follows:

while (true){
    // your code goes here
}
The Java programming language also provides a do-while statement, which can be expressed as follows:

do {
     statement(s)
} while (expression);
The difference between do-while and while is that do-while evaluates its expression at the bottom of the loop instead of the top. Therefore, the statements within the do block are always executed at least once, as shown in the following DoWhileDemo program:

class DoWhileDemo {
    public static void main(String[] args){
        int count = 1;
        do {
            System.out.println("Count is: " + count);
            count++;
        } while (count < 11);
    }
}
Arrays:
In the Java programming language, are objects ( are dynamically created, and may be assigned to variables of type Object . All methods of class Object may be invoked on an array.

An array object contains a number of variables. The number of variables may be zero, in which case the array is said to be empty. The variables contained in an array have no names; instead they are referenced by array access expressions that use non-negative integer index values. These variables are called the components of the array. If an array has n components, we say n is the length of the array; the components of the array are referenced using integer indices from 0 to n - 1, inclusive.

All the components of an array have the same type, called the component type of the array. If the component type of an array is T, then the type of the array itself is written T[].

The value of an array component of type float is always an element of the float value set (The component type of an array may itself be an array type. The components of such an array may contain references to subarrays. If, starting from any array type, one considers its component type, and then (if that is also an array type) the component type of that type, and so on, eventually one must reach a component type that is not an array type; this is called the element type of the original array, and the components at this level of the data structure are called the elements of the original array.

There are some situations in which an element of an array can be an array: if the element type is Object or Cloneable or java.io.Serializable, then some or all of the elements may be arrays, because any array object can be assigned to any variable of these types.

Array Types:

Array types are used in declarations and in cast expressions.

An array type is written as the name of an element type followed by some number of empty pairs of square brackets []. The number of bracket pairs indicates the depth of array nesting.

An array's length is not part of its type.

The element type of an array may be any type, whether primitive or reference. In particular:

·         Arrays with an interface type as the element type are allowed.

An element of such an array may have as its value a null reference or an instance of any type that implements the interface.

·         Arrays with an abstract class type as the element type are allowed.

An element of such an array may have as its value a null reference or an instance of any subclass of the abstract class that is not itself abstract.

The supertypes of an array type are specified in .

The direct superclass of an array type is Object.

Every array type implements the interfaces Cloneable and java.io.Serializable.

Array Variables:

A variable of array type holds a reference to an object. Declaring a variable of array type does not create an array object or allocate any space for array components. It creates only the variable itself, which can contain a reference to an array.

However, the initializer part of a declarator (

Example 10.2-1. Declarations of Array Variables

int[]     ai;        // array of int
short[][] as;        // array of array of short
short     s,         // scalar short
          aas[][];   // array of array of short
Object[]  ao,        // array of Object
          otherAo;   // array of Object
Collection<?>[] ca;  // array of Collection of unknown type
 
The declarations above do not create array objects. The following are examples of declarations of array variables that do create array objects:

Exception ae[]  = new Exception[3];
Object aao[][]  = new Exception[2][3];
int[] factorial = { 1, 1, 2, 6, 24, 120, 720, 5040 };
char ac[]       = { 'n', 'o', 't', ' ', 'a', ' ',
                    'S', 't', 'r', 'i', 'n', 'g' };
String[] aas    = { "array", "of", "String", };
Array Creation: or an array initializer .

An array creation expression specifies the element type, the number of levels of nested arrays, and the length of the array for at least one of the levels of nesting. The array's length is available as a final instance variable length.

An array initializer creates an array and provides initial values for all its components.

An array declaration has two components: the type and the name. type declares the element type of the array. The element type determines the data type of each element that comprises the array. Like array of int type, we can also create an array of other primitive data types like char, float, double..etc or user defined data type(objects of a class).Thus, the element type for the array determines what type of data the array will hold. 

Example:

// both are valid declarations
int intArray[]; 
or int[] intArray; 
 
byte byteArray[];
short shortsArray[];
boolean booleanArray[];
long longArray[];
float floatArray[];
double doubleArray[];
char charArray[];
 
// an array of references to objects of
// the class MyClass (a class created by
// user)
MyClass myClassArray[]; 
 
Object[]  ao,        // array of Object
Collection[] ca;  // array of Collection
                     // of unknown type
Although the above first declaration establishes the fact that intArray is an array variable, no array actually exists. It simply tells to the compiler that this(intArray) variable will hold an array of the integer type. To link intArray with an actual, physical array of integers, you must allocate one using new and assign it to intArray.

Instantiating an Array in Java

When an array us declared, only a reference of array is created. To actually create or give memory to array, you create an array like this:The general form of new as it applies to one-dimensional arrays appears as follows:

var-name = new type [size];
Here, type specifies the type of data being allocated, size specifies the number of elements in the array, and var-name is the name of array variable that is linked to the array. That is, to use new to allocate an array, you must specify the type and number of elements to allocate.

Example:

int intArray[];    //declaring array
intArray = new int[20];  // allocating memory to array
OR

int[] intArray = new int[20]; // combining both statements in one
Note :

The elements in the array allocated by new will automatically be initialized to zero (for numeric types), false (for boolean), or null (for reference types).Refer Default array values in Java
Obtaining an array is a two-step process. First, you must declare a variable of the desired array type. Second, you must allocate the memory that will hold the array, using new, and assign it to the array variable. Thus, in Java all arrays are dynamically allocated.
Array Literal

In a situation, where the size of the array and variables of array are already known, array literals can be used.

 int[] intArray = new int[]{ 1,2,3,4,5,6,7,8,9,10 }; 
 // Declaring array literal
The length of this array determines the length of the created array.
There is no need to write the new int[] part in the latest versions of Java
Accessing Java Array Elements using for Loop

Each element in the array is accessed via its index. The index begins with 0 and ends at (total array size)-1. All the elements of array can be accessed using Java for Loop.

 
// accessing the elements of the specified array
for (int i = 0; i < arr.length; i++)
  System.out.println("Element at index " + i + 
                                " : "+ arr[i]);
Implementation:

// Java program to illustrate creating an array
// of integers,  puts some values in the array,
// and prints each value to standard output.
 
class GFG 
{
    public static void main (String[] args) 
    {         
      // declares an Array of integers.
      int[] arr;
         
      // allocating memory for 5 integers.
      arr = new int[5];
         
      // initialize the first elements of the array
      arr[0] = 10;
         
      // initialize the second elements of the array
      arr[1] = 20;
         
      //so on...
      arr[2] = 30;
      arr[3] = 40;
      arr[4] = 50;
         
      // accessing the elements of the specified array
      for (int i = 0; i < arr.length; i++)
         System.out.println("Element at index " + i + 
                                      " : "+ arr[i]);          
    }
}